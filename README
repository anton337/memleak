This program looks for memory leaks associated with 'new' and 'delete' calls.


void super_special_alloc(float**arr,int k)
{
  arr[k] = new float[100];
}

void super_special_dealloc(float**arr,int k)
{
  delete [] arr[k];
}

int main()
{
  float** arr = new float*[10];
  float * dat = new float[5];
  float * k = new float[10];
  double * T = new double(50.5f);
  double * D = new double(55.5f);
  for(int i=0;i<10;i++)super_special_alloc(arr,i);
  delete D;
  delete [] dat;
  delete T;
  delete [] k;
  for(int i=0;i<10;i++)super_special_dealloc(arr,i);
  delete [] arr;
  print_summary();
  return 0;
}




./ldetect 
malloc:80:0x2333c20
malloc:20:0x2333c80
malloc:40:0x2333ce0
malloc:8:0x2333d50
malloc:8:0x2333db0
malloc:400:0x2333e10
malloc:400:0x2333ff0
malloc:400:0x23341b0
malloc:400:0x23354f0
malloc:400:0x2335690
malloc:400:0x2335830
malloc:400:0x23359d0
malloc:400:0x233bcc0
malloc:400:0x233be60
malloc:400:0x233c000
free:8:0x2333db0
free:20:0x2333c80
free:8:0x2333d50
free:40:0x2333ce0
free:400:0x2333e10
free:400:0x2333ff0
free:400:0x23341b0
free:400:0x23354f0
free:400:0x2335690
free:400:0x2335830
free:400:0x23359d0
free:400:0x233bcc0
free:400:0x233be60
free:400:0x233c000
free:80:0x2333c20
map size:6

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znam+0x18) [0x401ace]
./ldetect(main+0x12) [0x401c17]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 1 80

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znam+0x18) [0x401ace]
./ldetect(main+0x20) [0x401c25]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 1 20

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znam+0x18) [0x401ace]
./ldetect(main+0x2e) [0x401c33]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 1 40

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znwm+0x18) [0x401b00]
./ldetect(main+0x3c) [0x401c41]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 1 8

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znwm+0x18) [0x401b00]
./ldetect(main+0x56) [0x401c5b]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 1 8

./ldetect(_Z4INFOPKcmmPv+0x7b) [0x401dde]
./ldetect(_Z10dbg_mallocm+0x43) [0x401fae]
./ldetect(_Znam+0x18) [0x401ace]
./ldetect(_Z19super_special_allocPPfi+0x2f) [0x401bad]
./ldetect(main+0x84) [0x401c89]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f3df87a8830]
./ldetect(_start+0x29) [0x4019e9]
0 10  4000

This memory catalogs each allocation and deallocation event, and counts the number of bytes still left associated with each event. It also prints out the stack trace associated with each unique allocating event.




==20598== Memcheck, a memory error detector
==20598== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==20598== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==20598== Command: ./ldetect
==20598== Parent PID: 20597
==20598== 
==20598== 
==20598== HEAP SUMMARY:
==20598==     in use at exit: 72,704 bytes in 1 blocks
==20598==   total heap usage: 150 allocs, 149 frees, 257,567 bytes allocated
==20598== 
==20598== 72,704 bytes in 1 blocks are still reachable in loss record 1 of 1
==20598==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==20598==    by 0x4EC3EFF: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)
==20598==    by 0x40106B9: call_init.part.0 (dl-init.c:72)
==20598==    by 0x40107CA: call_init (dl-init.c:30)
==20598==    by 0x40107CA: _dl_init (dl-init.c:120)
==20598==    by 0x4000C69: ??? (in /lib/x86_64-linux-gnu/ld-2.23.so)
==20598== 
==20598== LEAK SUMMARY:
==20598==    definitely lost: 0 bytes in 0 blocks
==20598==    indirectly lost: 0 bytes in 0 blocks
==20598==      possibly lost: 0 bytes in 0 blocks
==20598==    still reachable: 72,704 bytes in 1 blocks
==20598==         suppressed: 0 bytes in 0 blocks
==20598== 
==20598== For counts of detected and suppressed errors, rerun with: -v
==20598== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

We use valgrind to verify that the memory leak checking code does not leak memory itself.

